{"mappings":"AAAA,MAAM,eAAe,GAAG,+OAA+O,AAAC;AAExQ,MAAM,aAAa,GAAG,UAAY;IAE9B,IAAI;QAEA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,AAAC;QAE9C,IAAI,QAAQ,CAAC,EAAE,EAAE;YAEb,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,AAAC;YAEnC,MAAM,aAAa,GAAG;gBAClB,OAAO,EAAE;oBAAC,aAAa;oBAAE,wBAAwB;oBAAE,kBAAkB;oBAAE,qBAAqB;iBAAC;gBAC7F,QAAQ,EAAE;oBAAC,cAAc;oBAAE,yBAAyB;oBAAE,mBAAmB;oBAAE,sBAAsB;iBAAC;gBAClG,QAAQ,EAAE;oBAAC,cAAc;oBAAE,yBAAyB;oBAAE,mBAAmB;oBAAE,sBAAsB;iBAAC;gBAClG,OAAO,EAAE;oBAAC,aAAa;oBAAE,wBAAwB;oBAAE,kBAAkB;oBAAE,qBAAqB;iBAAC;gBAC7F,MAAM,EAAE;oBAAC,YAAY;oBAAE,uBAAuB;oBAAE,iBAAiB;oBAAE,oBAAoB;iBAAC;aAC3F,AAAC;YAEF,KAAK,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAE;gBACvD,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,AAAC;gBAChC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC;gBAC3D,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,UAAU,CAAC,cAAc,CAAC;gBACtE,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC;gBACnE,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;aAC/F;SAEJ,MAEG,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;KAE/C,CAAC,OAAO,KAAK,EAAE;QAEZ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACtB;CACJ,AAAC;AAEF,aAAa,EAAE,CAAC","sources":["src/js/api-config.js"],"sourcesContent":["const BASE_CRYPTO_SRC = \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin%2Cethereum%2Ctether%2CBNB%2CUSD%20coin%2CXRP%2CBinance%20USD%2CCardano%2CSolana%2CDogecoin&vs_currencies=usd&include_market_cap=true&include_24hr_vol=true&include_24hr_change=true\";\r\n\r\nconst getCryptoData = async () => {\r\n\r\n    try {\r\n\r\n        const response = await fetch(BASE_CRYPTO_SRC);\r\n\r\n        if (response.ok) {\r\n\r\n            const data = await response.json();\r\n\r\n            const cryptoDataMap = {\r\n                bitcoin: [\"bitcoin-USD\", \"bitcoin-USD-market-cap\", \"bitcoin-24hr-vol\", \"bitcoin-24hr-change\"],\r\n                ethereum: [\"ethereum-USD\", \"ethereum-USD-market-cap\", \"ethereum-24hr-vol\", \"ethereum-24hr-change\"],\r\n                dogecoin: [\"dogecoin-USD\", \"dogecoin-USD-market-cap\", \"dogecoin-24hr-vol\", \"dogecoin-24hr-change\"],\r\n                cardano: [\"cardano-USD\", \"cardano-USD-market-cap\", \"cardano-24hr-vol\", \"cardano-24hr-change\"],\r\n                tether: [\"tether-USD\", \"tether-USD-market-cap\", \"tether-24hr-vol\", \"tether-24hr-change\"],\r\n            };\r\n\r\n            for (const [crypto, ids] of Object.entries(cryptoDataMap)) {\r\n                const cryptoData = data[crypto];\r\n                document.getElementById(ids[0]).innerHTML = cryptoData.usd;\r\n                document.getElementById(ids[1]).innerHTML = cryptoData.usd_market_cap;\r\n                document.getElementById(ids[2]).innerHTML = cryptoData.usd_24h_vol;\r\n                document.getElementById(ids[3]).innerHTML = Math.round(cryptoData.usd_24h_change * 10) / 10;\r\n            }\r\n\r\n        } else {\r\n\r\n            throw new Error(\"Failed to fetch data\");\r\n        }\r\n    } catch (error) {\r\n\r\n        console.log(error);\r\n    }\r\n};\r\n\r\ngetCryptoData();"],"names":[],"version":3,"file":"index.24537248.js.map","sourceRoot":"/__parcel_source_root/"}